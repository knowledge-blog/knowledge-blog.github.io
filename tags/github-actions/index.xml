<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GitHub Actions on nannannan</title>
    <link>https://3nan3.github.io/tags/github-actions/</link>
    <description>Recent content in GitHub Actions on nannannan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 22 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://3nan3.github.io/tags/github-actions/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GitHub Actions で別のリポジトリに git push する</title>
      <link>https://3nan3.github.io/post/2019122201_github_actions/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://3nan3.github.io/post/2019122201_github_actions/</guid>
      <description>はじめに GitHubに新しく GitHub Actions というものがリリースされました。いつもはCircle CIを使っていたのですが、試しに使ってみようということで軽く触ってみました。
このブログは先日作ったばかりなのですが、その時に「ブログ管理用レポジトリにmargeされたら、静的ページをビルドして、ブログ公開用レポジトリにpushする」という機能をあとでやる(※)って言っていたので、これをサンプルとして作ってみようと思います。
tl;dr  push先のレポジトリで、Settingsから Deploy keys （公開鍵）を登録 GitHub Actionsを設定するレポジトリで、Settingsの Secrets にDeploy keysに対応するの秘密鍵を登録 GitHub Actions用のymlをいい感じに書いてpushする  やってみる CI的なところはだいたい何ができるか想像つくんですけど、レポジトリ間の認証どうするのかと思って調べてみましたが、特段用意されてるわけではなさそうですね、知ってました。 自分自身のレポジトリに対する認証用に GITHUB_TOKEN というものが勝手に追加される程度でした。 なので、いつも通りの認証方式を取ります。
先に、レポジトリ構成を書いておきますと、 blog が 3nan3.github.io をpublicというフォルダ名でsubmoduleとして持っています。 なので、構図としては blog レポジトリが 3nan3.github.io レポジトリにpushする形になります。
─ blog (git repogitory blog) ├── public (git submodule 3nan3.github.io) └── ... # 他いろんなファイル Deploy keys GitHub Actionsを設定する前に、先に認証周りの設定を済ませておきます。
pushされる側のレポジトリで作業を進めます。
GitHubのSettingsにある、Deploy keysを使います。 これは、ユーザに紐付かない、設定したレポジトリにのみアクセスできる鍵を作成できる機能で、読み込み専用・読み書き可能などの権限設定をすることも可能です。 今回のように、人ではないサービスなどが読み込んだり書き込んだりする時に適切な権限設定ができるのでとても便利です。 サービスの規模などに合わせてどのように管理するべきか、みたいなものが公式のページに書かれているので、悩んだことがある方にはおすすめです。
https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys
で、鍵の生成はコマンドで、
&amp;gt; ssh-keygen -t ed25519 Generating public/private ed25519 key pair.</description>
    </item>
    
  </channel>
</rss>